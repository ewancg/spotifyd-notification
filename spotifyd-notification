#!/usr/bin/env bash

# PLAYER_EVENT
# TRACK_ID
# PLAY_REQUEST_ID
# POSITION_MS
# DURATION_MS
# VOLUME

# Change these
client_id=""
client_secret=""
data_dir="/var/tmp/spotifyd-notification"
cache_dir="/tmp/spotifyd-notification/"
notification_timeout="2500" # ms

# Change these if you want
api_token_path="$cache_dir/api-token"
cover_dir="$data_dir/coverart-cache"
spotify_icon_path="$data_dir/spotify.png"
last_error_path="$data_dir/error"

mkdir -p "$cover_dir"
mkdir -p "$cache_dir"

notify () {
    notify-send "$1" "$2" --app-name=Spotify --icon="$3" --expire-time="$4"
}

error () {
    return_code="${2:-0}"
    echo $1
    if [ -z "$last_error_path" ]; then
        notify "$1" "Won't error again during this session" "$spotify_icon_path" 7500
    fi
    echo $1 > $last_error_path
    exit $return_code
}

format_basic_auth () {
    echo "Basic $(printf "${client_id}:${client_secret}" | base64 -w 0 -)"
}

api_authorize () {
    echo hi
    result="$(
        curl -s \
        -H "Authorization: $(format_basic_auth)" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -X POST "https://accounts.spotify.com/api/token" \
        -d "grant_type=client_credentials" \
        -w "\n%{http_code}"
        )"

    echo "$result"
    response="$(echo "$result" | tail -n 1)"
    if [ "$response" -lt 200 ] || [ "$response" -gt 300 ]; then
        error "Spotify authorization API returned error code ${response}"
    fi

    response_expression="$(printf "$result" | head -n 1 | jq -r '.access_token, .expires_in')"
    if [ $? -ne 0 ]; then
        error "Error parsing response JSON (jq code ${$?}): ${response_expression}"
    fi

    echo $api_token_path

    printf "$response_expression" | head -n 1 > $api_token_path
    echo "sleep $(echo "$response_expression" | head -n 2); rm ${api_token_path}" | at now &> /dev/null
}

get_api_token () {
    if [ ! -f "${api_token_path}" ]; then
        api_authorize
    fi
    cat "${api_token_path}"
}

api_request() {
    result="$(
        curl -s \
        -H "Authorization: Bearer $(get_api_token)" \
        -X GET "https://api.spotify.com/v1/$1" \
        -w "\n%{http_code}"
        )"
    response="$(echo "$result" | tail -n 1)"
    if [ "$response" -lt 200 ] || [ "$response" -gt 300 ]; then
        error_msg=$(printf "$result" | head -n -1 | jq -r ".error.message")
        error "Spotify API returned error code ${response}: $error_msg"
    fi

    expression="$(printf "$result" | head -n -1 | jq -r "$2")"
    if [ $? -ne 0 ]; then
        error "Error parsing response JSON (jq code ${$?}): ${$2} ${expression}" -1
    fi

    echo "${expression}"
}

dump_envvars() {
    declare -a envvars=(PLAYER_EVENT TRACK_ID PLAY_REQUEST_ID POSITION_MS DURATION_MS VOLUME)
    for i in "${envvars[@]}"
    do
        printf "%-20s: ${!i}\n" "${i}"
    done
}

status() {
        response=$(api_request "tracks/${TRACK_ID}" ".name, .artists[].name, .album.name, .album.id, .album.images[1].url")  #.album[0].images[0]
        name="$(echo "$response" | sed -n '1p')"
        artist="$(echo "$response" | sed -n '2p')"
        album="$(echo "$response" | sed -n '3p')"
        album_id="$(echo "$response" | sed -n '4p')"
        cover_art_url="$(echo "$response" | sed -n '5p')"
        curl -s "$cover_art_url" -o "$cover_dir/${album_id}.jpg"
        notify "$name" "$artist | $album" "$cover_dir/${album_id}.jpg" $notification_timeout
}

case "$1" in
    --help)
        echo Help
        exit
    ;;
    --probe)
        status
        exit
    ;;
esac

case "$PLAYER_EVENT" in
  change)
    status
    ;;

  preload)
    response=$(api_request "tracks/${TRACK_ID}" ".name")
    notify "Next Up" "$response" 
    ;;

  *)
    envvars="$(dump_envvars)"
    notify "Unknown player event from spotifyd" "${envvars}"
    printf "Unknown player event received from spotifyd.\nRelevant environment variables:\n"
    echo "$envvars"
    ;;
esac
